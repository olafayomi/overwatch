# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

import dataplane_pb2 as dataplane__pb2
from google.protobuf import empty_pb2 as google_dot_protobuf_dot_empty__pb2


class DataplaneStateStub(object):
    """Define the rpc service interface to get data
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.GetIfaces = channel.unary_unary(
                '/DataplaneState/GetIfaces',
                request_serializer=google_dot_protobuf_dot_empty__pb2.Empty.SerializeToString,
                response_deserializer=dataplane__pb2.ReplyIfaces.FromString,
                )
        self.GetExternalIfaces = channel.unary_unary(
                '/DataplaneState/GetExternalIfaces',
                request_serializer=dataplane__pb2.RequestIfaces.SerializeToString,
                response_deserializer=dataplane__pb2.ReplyIfaces.FromString,
                )
        self.GetInternalIfaces = channel.unary_unary(
                '/DataplaneState/GetInternalIfaces',
                request_serializer=dataplane__pb2.RequestIfaces.SerializeToString,
                response_deserializer=dataplane__pb2.ReplyIfaces.FromString,
                )
        self.GetRoutingTables = channel.unary_unary(
                '/DataplaneState/GetRoutingTables',
                request_serializer=google_dot_protobuf_dot_empty__pb2.Empty.SerializeToString,
                response_deserializer=dataplane__pb2.RoutesInAllTables.FromString,
                )
        self.GetRouteTable = channel.unary_unary(
                '/DataplaneState/GetRouteTable',
                request_serializer=dataplane__pb2.RTables.SerializeToString,
                response_deserializer=dataplane__pb2.RoutesInTable.FromString,
                )
        self.Getip6tables = channel.unary_unary(
                '/DataplaneState/Getip6tables',
                request_serializer=google_dot_protobuf_dot_empty__pb2.Empty.SerializeToString,
                response_deserializer=dataplane__pb2.RequestIP6TableRule.FromString,
                )


class DataplaneStateServicer(object):
    """Define the rpc service interface to get data
    """

    def GetIfaces(self, request, context):
        """Get intefaces
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetExternalIfaces(self, request, context):
        """Get external interfaces
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetInternalIfaces(self, request, context):
        """Get internal interfaces
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetRoutingTables(self, request, context):
        """Get all routing tables 
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetRouteTable(self, request, context):
        """Get specific route table for a flow type
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Getip6tables(self, request, context):
        """Get nftable rules
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_DataplaneStateServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'GetIfaces': grpc.unary_unary_rpc_method_handler(
                    servicer.GetIfaces,
                    request_deserializer=google_dot_protobuf_dot_empty__pb2.Empty.FromString,
                    response_serializer=dataplane__pb2.ReplyIfaces.SerializeToString,
            ),
            'GetExternalIfaces': grpc.unary_unary_rpc_method_handler(
                    servicer.GetExternalIfaces,
                    request_deserializer=dataplane__pb2.RequestIfaces.FromString,
                    response_serializer=dataplane__pb2.ReplyIfaces.SerializeToString,
            ),
            'GetInternalIfaces': grpc.unary_unary_rpc_method_handler(
                    servicer.GetInternalIfaces,
                    request_deserializer=dataplane__pb2.RequestIfaces.FromString,
                    response_serializer=dataplane__pb2.ReplyIfaces.SerializeToString,
            ),
            'GetRoutingTables': grpc.unary_unary_rpc_method_handler(
                    servicer.GetRoutingTables,
                    request_deserializer=google_dot_protobuf_dot_empty__pb2.Empty.FromString,
                    response_serializer=dataplane__pb2.RoutesInAllTables.SerializeToString,
            ),
            'GetRouteTable': grpc.unary_unary_rpc_method_handler(
                    servicer.GetRouteTable,
                    request_deserializer=dataplane__pb2.RTables.FromString,
                    response_serializer=dataplane__pb2.RoutesInTable.SerializeToString,
            ),
            'Getip6tables': grpc.unary_unary_rpc_method_handler(
                    servicer.Getip6tables,
                    request_deserializer=google_dot_protobuf_dot_empty__pb2.Empty.FromString,
                    response_serializer=dataplane__pb2.RequestIP6TableRule.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'DataplaneState', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class DataplaneState(object):
    """Define the rpc service interface to get data
    """

    @staticmethod
    def GetIfaces(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/DataplaneState/GetIfaces',
            google_dot_protobuf_dot_empty__pb2.Empty.SerializeToString,
            dataplane__pb2.ReplyIfaces.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetExternalIfaces(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/DataplaneState/GetExternalIfaces',
            dataplane__pb2.RequestIfaces.SerializeToString,
            dataplane__pb2.ReplyIfaces.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetInternalIfaces(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/DataplaneState/GetInternalIfaces',
            dataplane__pb2.RequestIfaces.SerializeToString,
            dataplane__pb2.ReplyIfaces.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetRoutingTables(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/DataplaneState/GetRoutingTables',
            google_dot_protobuf_dot_empty__pb2.Empty.SerializeToString,
            dataplane__pb2.RoutesInAllTables.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetRouteTable(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/DataplaneState/GetRouteTable',
            dataplane__pb2.RTables.SerializeToString,
            dataplane__pb2.RoutesInTable.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def Getip6tables(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/DataplaneState/Getip6tables',
            google_dot_protobuf_dot_empty__pb2.Empty.SerializeToString,
            dataplane__pb2.RequestIP6TableRule.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)


class ConfigureDataplaneStub(object):
    """Define the rpc service interface to configure dataplane for PAR
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.FlowMark = channel.unary_unary(
                '/ConfigureDataplane/FlowMark',
                request_serializer=dataplane__pb2.RequestFlowMark.SerializeToString,
                response_deserializer=dataplane__pb2.ReplyFlowMark.FromString,
                )
        self.CreateRouteTable = channel.unary_unary(
                '/ConfigureDataplane/CreateRouteTable',
                request_serializer=dataplane__pb2.PARFlows.SerializeToString,
                response_deserializer=dataplane__pb2.ReplyPARFlows.FromString,
                )
        self.AddIp6tableRule = channel.unary_unary(
                '/ConfigureDataplane/AddIp6tableRule',
                request_serializer=dataplane__pb2.RequestIP6TableRule.SerializeToString,
                response_deserializer=dataplane__pb2.ReplyIP6TableRule.FromString,
                )


class ConfigureDataplaneServicer(object):
    """Define the rpc service interface to configure dataplane for PAR
    """

    def FlowMark(self, request, context):
        """Mark traffic
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def CreateRouteTable(self, request, context):
        """Create routing tables for flows
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def AddIp6tableRule(self, request, context):
        """Create NFTable rules to PAR flows on ingress interfaces
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_ConfigureDataplaneServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'FlowMark': grpc.unary_unary_rpc_method_handler(
                    servicer.FlowMark,
                    request_deserializer=dataplane__pb2.RequestFlowMark.FromString,
                    response_serializer=dataplane__pb2.ReplyFlowMark.SerializeToString,
            ),
            'CreateRouteTable': grpc.unary_unary_rpc_method_handler(
                    servicer.CreateRouteTable,
                    request_deserializer=dataplane__pb2.PARFlows.FromString,
                    response_serializer=dataplane__pb2.ReplyPARFlows.SerializeToString,
            ),
            'AddIp6tableRule': grpc.unary_unary_rpc_method_handler(
                    servicer.AddIp6tableRule,
                    request_deserializer=dataplane__pb2.RequestIP6TableRule.FromString,
                    response_serializer=dataplane__pb2.ReplyIP6TableRule.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'ConfigureDataplane', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class ConfigureDataplane(object):
    """Define the rpc service interface to configure dataplane for PAR
    """

    @staticmethod
    def FlowMark(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/ConfigureDataplane/FlowMark',
            dataplane__pb2.RequestFlowMark.SerializeToString,
            dataplane__pb2.ReplyFlowMark.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def CreateRouteTable(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/ConfigureDataplane/CreateRouteTable',
            dataplane__pb2.PARFlows.SerializeToString,
            dataplane__pb2.ReplyPARFlows.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def AddIp6tableRule(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/ConfigureDataplane/AddIp6tableRule',
            dataplane__pb2.RequestIP6TableRule.SerializeToString,
            dataplane__pb2.ReplyIP6TableRule.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
